--- General Notes for using SDCC ---- 
This is an over generaliztion for the simple way of getting from code to flashing.


1) Download and install newest version of SDCC.
	--> from Sourceforge: https://sourceforge.net/projects/sdcc/files/

- This should automatically set the PATH environment. 

2) Verify that it installed correctly.
    (probably need to) close/reopen terminal
	in CMD: sdcc --version 

- If you need to find where it installed:
	in CMD (windows): where sdcc 
    in CMD (linux): which sdcc

3) Compile code
	terminal/cmd: sdcc -c file_name.c 
    use simple hello.c as example
	
- Used to compile the code into assembly

4) Link code 
	terminal/cmd: sdcc file_name
    **stuck here... errors up the wazoo**

- Used to link files together and create hex files for flashing. Can skipp Step 3 to this one directly if you want.

- With multiple source files you will have to do include all of them for the file generation. 
	ex: sdcc file1.c file2.c 

- If header files are in a different folder, use -I/path/to/header/files when you link.
	ex: sdcc -I/C:/Program Files/SDCC/include/mcs51

5) turn .ihx to hex file
	terminal/code: packihx file_name.ihx >file_name.hex
	
6) To turn into flashable code for SmartRF Flash Programmer 
	- use the `-o`  command to make output files
	ex: sdcc -o output_file.hex file_name.c

7) flash with the SmartRF Flash Programmer
- "What you want to program?" ==> Program CCxxxx SoC or MSP430
- https://software-dl.ti.com/dsps/forms/self_cert_export.html?prod_no=flash-programmer-1.12.8.zip
--> allows you to program the chip. 
- put .hex file from compilation (in /bin) as flash image
- press "perform action"


---- Makefile General Notes ---- 

1) You can use Msys2 to get the relevant make.exe and other GCC commands.
- Install Msys2, and in its terminal run: pacman -Syu 
  You will need to restart terminal after. 
- Run: pacman -Sy ==> this validates everything is upto date. 
- Get make: pacman -S --needed make ==> get make file 
 Now you should have everything to run the make file. 

2) Make sure that you can use the command `make`. 
- If you do not have make either install through Msys2, mingw32, or similar.
- Make command is required for being able to compile from Makefile or else you will have
to do everything line by line. 
- To setpath when using Msys2, in terminal run: $env:PATH = "C:\msys64\usr\bin;" + $env:PATH
  This should allow you to find the path that you need to run make. 

2) In terminal: `make`
- NOTE: DO NOT FORGET TO: mkdir -p obj 
- from Keil_CC2511x folder
- you should see a bunch of outputs for warnings (if present) or `sdcc` commands. 
- This stage will also stop compilation and source to the specific errors of a file
when they are present. 

This is required so that the Makefile knows where to store all the object files (e.g. .lst, .asm, .sym ...)

3) If you want to clean build, in terminal: `make clean` then `make` 
- Just allows you to recompile and turn everything into hex again.

NOTE: the compiler will only perform compilations on files that have had changes made, or
need updating on how they are linked. This is nice because we don't have to worry about
constantly recompiling every single file for small changes. 

4) To flash, use debugger and SmartRF Flash Programmer, select the .hex file found in 
the `bin/` folder. You can use either fast or slow interface. 
- Action: Erase, program, and verify then "Perform actions". 

NOTE: This is so much nicer to use at the moment because we can make flashing simple and
fast right after making the hex file. 
